pipeline {
	agent any
	stages {

		stage('Lint HTML') {
			steps {
				sh 'tidy -q -e deploy-containers-pipeline/*.html'
			}
		}
		
		stage('Build Docker Image') {
			steps {
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD']]){
					sh '''
						docker build -t maheshe/mahadocker1 deploy-containers-pipeline/.
					'''
				}
			}
		}

		stage('Push Image To Dockerhub') {
			steps {
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD']]){
					sh '''
						docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
						docker push maheshe/mahadocker1:latest
					'''
				}
			}
		}

		stage(' current kubectl contextWW') {
			steps {
				withAWS(region:'us-west-2', credentials:'mahajenkinsA') {
					sh '''
						aws2 eks --region us-west-2 update-kubeconfig --name capstonecluster  --role-arn arn:aws:iam::360735975530:role/eksAdminNewRoot
						eksctl create iamidentitymapping --cluster  capstonecluster --arn arn:aws:iam::360735975530:role/eksAdminNewRoot --group system:masters --username admin
						aws sts get-caller-identity
						kubectl config use-context arn:aws:eks:us-west-2:360735975530:cluster/capstonecluster
					'''
				}
			}
		}
 
		
		stage('DUPLOY blue containera') {
			steps {
				withAWS(region:'us-west-2', credentials:'mahajenkinsA') {
					sh '''
						kubectl config view
						kubectl get svc
						kubectl apply -f blue-controller.json
					'''	
				}
			}
		}
	

		stage('Deploy green containersi') {
			steps {
				withAWS(region:'us-west-2', credentials:'mahajenkinsA') {
					sh '''
						kubectl apply -f ./deploy-containers-pipeline/green-controller.json
					'''
				}
			}
		}

		stage('Create the service in the cluster, redirect to blue') {
			steps {
				withAWS(region:'us-west-2', credentials:'mahajenkinsA') {
					sh '''
						kubectl apply -f ./deploy-containers-pipeline/blue-service.json
					'''
				}
			}
		}
		stage('Wait user approve') {
            steps {
                input "Ready to redirect traffic to green?"
            }
        }

		stage('Create the service in the cluster, redirect to green') {
			steps {
				withAWS(region:'us-west-2', credentials:'mahajenkinsA') {
					sh '''
						kubectl apply -f ./deploy-containers-pipeline/green-service.json
					'''
				}
			}
		}

	}
}
